{"version":3,"sources":["file:///Users/edz/work/creatorproject/3.3.1/test/assets/label/ttfUtils.ts"],"names":["BASELINE_RATIO","Color","director","dynamicAtlasManager","fragmentText","getBaselineOffset","HorizontalTextAlignment","Label","LabelOutline","LabelShadow","logID","Rect","safeMeasureText","Size","SpriteFrame","Vec2","VerticalTextAlignment","Overflow","MAX_SIZE","_BASELINE_OFFSET","_invisibleAlpha","toFixed","_context","_canvas","_texture","_fontDesc","_string","_fontSize","_drawFontsize","_splitStrings","_canvasSize","_lineHeight","_hAlign","_vAlign","_color","_alpha","_fontFamily","_overflow","NONE","_isWrapText","_outlineComp","_outlineColor","BLACK","clone","_shadowComp","_shadowColor","_canvasPadding","_contentSizeExtend","ZERO","_nodeContentSize","_startPosition","_drawUnderlinePos","_drawUnderlineWidth","_underlineThickness","_isBold","_isItalic","_isUnderline","Alignment","ttfUtils","getAssemblerData","sharedLabelData","_canvasPool","get","resetAssemblerData","assemblerData","put","updateRenderData","comp","renderData","vertDirty","trans","node","_uiProps","uiTransformComp","_updateFontFamily","_updateProperties","_calculateLabelFont","_updateLabelDimensions","_resetDynamicAtlas","_updateTexture","updateOpacity","_setCacheAlpha","_calDynamicAtlas","actualFontSize","setContentSize","updateVertexData","updateUvs","markForUpdateRenderData","vData","colorOffset","colorA","opacity","i","useSystemFont","font","_nativeAsset","fontFamily","context","canvas","spriteFrame","string","toString","fontSize","overflow","width","height","underlineHeight","lineHeight","horizontalAlign","verticalAlign","color","isBold","isItalic","isUnderline","RESIZE_HEIGHT","enableWrapText","getComponent","enabled","set","_updatePaddingRect","top","bottom","left","right","outlineWidth","shadowWidth","blur","offsetX","offset","x","offsetY","y","Math","max","tan","_calculateFillTextStartPosition","labelX","RIGHT","CENTER","_getLineHeight","drawStartY","length","firstLinelabelY","TOP","blank","BOTTOM","clearRect","lineJoin","fillStyle","r","g","b","fillRect","_srcBlendFactor","BlendFactor","SRC_ALPHA","drawTextPosX","drawTextPosY","_drawTextEffect","strokeText","fillText","shadowColor","tex","texture","uploadAgain","reset","mipmapLevel","uploadData","rect","_calculateUV","root","batcher2D","_releaseDescriptorSetCache","getHash","cacheMode","CacheMode","BITMAP","frame","ttfSpriteFrame","deleteAtlasSpriteFrame","_resetDynamicAtlasFrame","packToDynamicAtlas","uvDirty","_setupOutline","strokeStyle","a","lineWidth","_setupShadow","shadowBlur","shadowOffsetX","shadowOffsetY","startPosition","isMultiple","measureText","_measureText","min","recreate","textAlign","textBaseline","_getFontDesc","fontDesc","nodeSpacingY","_calculateParagraphLength","paragraphedStrings","ctx","paragraphLength","para","push","_calculateShrinkFont","totalHeight","maxLength","canvasWidthNoMargin","canvasHeightNoMargin","textFragment","mid","allWidth","scaleX","scaleY","_calculateWrapText","concat","split","canvasSizeX","canvasSizeY","paraLength","rawWidth","parseFloat","rawHeight","SHRINK","CLAMP"],"mappings":"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","sourcesContent":["/*\n Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.\n\n http://www.cocos.com\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated engine source code (the \"Software\"), a limited,\n worldwide, royalty-free, non-assignable, revocable and non-exclusive license\n to use Cocos Creator solely to develop games on your target platforms. You shall\n not use Cocos Creator software for developing other software or tools that's\n used for developing games. You are not granted to publish, distribute,\n sublicense, and/or sell copies of Cocos Creator.\n\n The software or tools in this License Agreement are licensed, not sold.\n Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n*/\n\nimport { BASELINE_RATIO, Color, director, dynamicAtlasManager, fragmentText, getBaselineOffset, HorizontalTextAlignment, Label, LabelOutline, LabelShadow, logID, Rect, safeMeasureText, Size, SpriteFrame, Texture2D, UITransform, Vec2, VerticalTextAlignment } from \"cc\";\nimport { ISharedLabelData, LetterRenderTexture } from \"./font-utils\";\n\n/**\n * @packageDocumentation\n * @hidden\n */\n\n\n\nconst Overflow = Label.Overflow;\nconst MAX_SIZE = 2048;\nconst _BASELINE_OFFSET = getBaselineOffset();\nconst _invisibleAlpha = (1 / 255).toFixed(3);\n\nlet _context: CanvasRenderingContext2D | null = null;\nlet _canvas: HTMLCanvasElement | null = null;\nlet _texture: SpriteFrame | LetterRenderTexture | null = null;\n\nlet _fontDesc = '';\nlet _string = '';\nlet _fontSize = 0;\nlet _drawFontsize = 0;\nlet _splitStrings: string[] = [];\nconst _canvasSize = new Size();\nlet _lineHeight = 0;\nlet _hAlign = 0;\nlet _vAlign = 0;\nlet _color = new Color();\nlet _alpha = 1;\nlet _fontFamily = '';\nlet _overflow = Overflow.NONE;\nlet _isWrapText = false;\n\n// outline\nlet _outlineComp: LabelOutline | null = null;\nconst _outlineColor = Color.BLACK.clone();\n\n// shadow\nlet _shadowComp: LabelShadow | null = null;\nconst _shadowColor = Color.BLACK.clone();\n\nconst _canvasPadding = new Rect();\nconst _contentSizeExtend = Size.ZERO.clone();\nconst _nodeContentSize = Size.ZERO.clone();\nconst _startPosition = Vec2.ZERO.clone();\n\nconst _drawUnderlinePos = Vec2.ZERO.clone();\nlet _drawUnderlineWidth = 0;\nlet _underlineThickness = 0;\n\nlet _isBold = false;\nlet _isItalic = false;\nlet _isUnderline = false;\n\nconst Alignment = [\n    'left', // macro.TextAlignment.LEFT\n    'center', // macro.TextAlignment.CENTER\n    'right', // macro.TextAlignment.RIGHT\n];\n\nexport const ttfUtils =  {\n    getAssemblerData () {\n        const sharedLabelData = Label._canvasPool.get();\n        return sharedLabelData;\n    },\n\n    resetAssemblerData (assemblerData: ISharedLabelData) {\n        if (assemblerData) {\n            Label._canvasPool.put(assemblerData);\n        }\n    },\n\n    updateRenderData (comp: Label) {\n        if (!comp.renderData || !comp.renderData.vertDirty) { return; }\n\n        const trans = comp.node._uiProps.uiTransformComp!;\n        this._updateFontFamily(comp);\n        this._updateProperties(comp, trans);\n        this._calculateLabelFont();\n        this._updateLabelDimensions();\n        this._resetDynamicAtlas(comp);\n        this._updateTexture(comp);\n        this.updateOpacity(comp);\n        comp._setCacheAlpha(_alpha);\n        this._calDynamicAtlas(comp);\n\n        comp.actualFontSize = _fontSize;\n        trans.setContentSize(_canvasSize);\n\n        this.updateVertexData(comp);\n        this.updateUvs(comp);\n\n        comp.markForUpdateRenderData(false);\n\n        _context = null;\n        _canvas = null;\n        _texture = null;\n    },\n\n    updateVertexData (comp: Label) {\n    },\n\n    updateUvs (comp: Label) {\n    },\n\n    updateOpacity (comp: Label) {\n        const vData = comp.renderData!.vData;\n\n        let colorOffset = 5;\n        const colorA = comp.node._uiProps.opacity;\n        for (let i = 0; i < 4; i++) {\n            vData![colorOffset + 3] = colorA;\n\n            colorOffset += 9;\n        }\n    },\n\n    _updateFontFamily (comp: Label) {\n        if (!comp.useSystemFont) {\n            if (comp.font) {\n                _fontFamily = comp.font._nativeAsset || 'Arial';\n            } else {\n                _fontFamily = 'Arial';\n            }\n        } else {\n            _fontFamily = comp.fontFamily || 'Arial';\n        }\n    },\n\n    _updateProperties (comp: Label, trans: UITransform) {\n        const assemblerData = comp.assemblerData;\n        if (!assemblerData) {\n            return;\n        }\n\n        _context = assemblerData.context;\n        _canvas = assemblerData.canvas;\n        _texture = comp.spriteFrame;\n\n        _string = comp.string.toString();\n        _fontSize = comp.fontSize;\n        _drawFontsize = _fontSize;\n        _overflow = comp.overflow;\n        _nodeContentSize.width = _canvasSize.width = trans.width;\n        _nodeContentSize.height = _canvasSize.height = trans.height;\n        _underlineThickness = comp.underlineHeight;\n        _lineHeight = comp.lineHeight;\n        _hAlign = comp.horizontalAlign;\n        _vAlign = comp.verticalAlign;\n        _color = comp.color;\n        _alpha = comp.node._uiProps.opacity;\n        _isBold = comp.isBold;\n        _isItalic = comp.isItalic;\n        _isUnderline = comp.isUnderline;\n\n        if (_overflow === Overflow.NONE) {\n            _isWrapText = false;\n        } else if (_overflow === Overflow.RESIZE_HEIGHT) {\n            _isWrapText = true;\n        } else {\n            _isWrapText = comp.enableWrapText;\n        }\n\n        // outline\n        _outlineComp = LabelOutline && comp.getComponent(LabelOutline);\n        _outlineComp = (_outlineComp && _outlineComp.enabled && _outlineComp.width > 0) ? _outlineComp : null;\n        if (_outlineComp) {\n            _outlineColor.set(_outlineComp.color);\n        }\n\n        // shadow\n        _shadowComp = LabelShadow && comp.getComponent(LabelShadow);\n        _shadowComp = (_shadowComp && _shadowComp.enabled) ? _shadowComp : null;\n        if (_shadowComp) {\n            _shadowColor.set(_shadowComp.color);\n        }\n\n        this._updatePaddingRect();\n    },\n\n    _updatePaddingRect () {\n        let top = 0; let bottom = 0; let left = 0; let right = 0;\n        let outlineWidth = 0;\n        _contentSizeExtend.width = _contentSizeExtend.height = 0;\n        if (_outlineComp) {\n            outlineWidth = _outlineComp.width;\n            top = bottom = left = right = outlineWidth;\n            _contentSizeExtend.width = _contentSizeExtend.height = outlineWidth * 2;\n        }\n        if (_shadowComp) {\n            const shadowWidth = _shadowComp.blur + outlineWidth;\n            const offsetX = _shadowComp.offset.x;\n            const offsetY = _shadowComp.offset.y;\n            left = Math.max(left, -offsetX + shadowWidth);\n            right = Math.max(right, offsetX + shadowWidth);\n            top = Math.max(top, offsetY + shadowWidth);\n            bottom = Math.max(bottom, -offsetY + shadowWidth);\n        }\n        if (_isItalic) {\n            // 0.0174532925 = 3.141592653 / 180\n            const offset = _drawFontsize * Math.tan(12 * 0.0174532925);\n            right += offset;\n            _contentSizeExtend.width += offset;\n        }\n        _canvasPadding.x = left;\n        _canvasPadding.y = top;\n        _canvasPadding.width = left + right;\n        _canvasPadding.height = top + bottom;\n    },\n\n    _calculateFillTextStartPosition () {\n        let labelX = 0;\n        if (_hAlign === HorizontalTextAlignment.RIGHT) {\n            labelX = _canvasSize.width - _canvasPadding.width;\n        } else if (_hAlign === HorizontalTextAlignment.CENTER) {\n            labelX = (_canvasSize.width - _canvasPadding.width) / 2;\n        }\n\n        const lineHeight = this._getLineHeight();\n        const drawStartY = lineHeight * (_splitStrings.length - 1);\n        // TOP\n        let firstLinelabelY = _fontSize * (1 - BASELINE_RATIO / 2);\n        if (_vAlign !== VerticalTextAlignment.TOP) {\n            // free space in vertical direction\n            let blank = drawStartY + _canvasPadding.height + _fontSize - _canvasSize.height;\n            if (_vAlign === VerticalTextAlignment.BOTTOM) {\n                // Unlike BMFont, needs to reserve space below.\n                blank += BASELINE_RATIO / 2 * _fontSize;\n                // BOTTOM\n                firstLinelabelY -= blank;\n            } else {\n                // CENTER\n                firstLinelabelY -= blank / 2;\n            }\n        }\n\n        firstLinelabelY += _BASELINE_OFFSET * _fontSize;\n\n        _startPosition.set(labelX + _canvasPadding.x, firstLinelabelY + _canvasPadding.y);\n    },\n\n    _updateTexture (comp: Label) {\n        if (!_context || !_canvas) {\n            return;\n        }\n\n        _context.clearRect(0, 0, _canvas.width, _canvas.height);\n        _context.font = _fontDesc;\n\n        this._calculateFillTextStartPosition();\n        const lineHeight = this._getLineHeight();\n        // use round for line join to avoid sharp intersect point\n        _context.lineJoin = 'round';\n\n        if (_outlineComp) {\n            _context.fillStyle = `rgba(${_outlineColor.r}, ${_outlineColor.g}, ${_outlineColor.b}, ${_invisibleAlpha})`;\n            // Notice: fillRect twice will not effect\n            _context.fillRect(0, 0, _canvas.width, _canvas.height);\n            // to keep the one model same as before\n            // Todo: remove this protect when component remove blend function\n            // @ts-expect-error remove when component remove blend function\n        } else if (comp._srcBlendFactor === BlendFactor.SRC_ALPHA) {\n            _context.fillStyle = `rgba(${_color.r}, ${_color.g}, ${_color.b}, ${_invisibleAlpha})`;\n            _context.fillRect(0, 0, _canvas.width, _canvas.height);\n        }\n        _context.fillStyle = `rgb(${_color.r}, ${_color.g}, ${_color.b})`;\n        const drawTextPosX = _startPosition.x;\n        let drawTextPosY = 0;\n        // draw shadow and underline\n        this._drawTextEffect(_startPosition, lineHeight);\n        // draw text and outline\n        for (let i = 0; i < _splitStrings.length; ++i) {\n            drawTextPosY = _startPosition.y + i * lineHeight;\n            if (_outlineComp) {\n                _context.strokeText(_splitStrings[i], drawTextPosX, drawTextPosY);\n            }\n            _context.fillText(_splitStrings[i], drawTextPosX, drawTextPosY);\n        }\n\n        if (_shadowComp) {\n            _context.shadowColor = 'transparent';\n        }\n\n        // _texture.handleLoadedTexture();\n        if (_texture) {\n            let tex: Texture2D;\n            if (_texture instanceof SpriteFrame) {\n                tex = (_texture.texture as Texture2D);\n            } else {\n                tex = _texture;\n            }\n\n            const uploadAgain = _canvas.width !== 0 && _canvas.height !== 0;\n\n            if (uploadAgain) {\n                tex.reset({\n                    width: _canvas.width,\n                    height: _canvas.height,\n                    mipmapLevel: 1,\n                });\n                tex.uploadData(_canvas);\n                if (_texture instanceof SpriteFrame) {\n                    _texture.rect = new Rect(0, 0, _canvas.width, _canvas.height);\n                    _texture._calculateUV();\n                }\n\n                if (director.root && director.root.batcher2D) {\n                    // @ts-ignore：官方不暴露接口，忽略错误\n                    director.root.batcher2D._releaseDescriptorSetCache(tex.getHash());\n                }\n            }\n        }\n    },\n\n    _resetDynamicAtlas (comp: Label) {\n        if (comp.cacheMode !== Label.CacheMode.BITMAP) return;\n        const frame = comp.ttfSpriteFrame!;\n        dynamicAtlasManager.deleteAtlasSpriteFrame(frame);\n        frame._resetDynamicAtlasFrame();\n    },\n\n    _calDynamicAtlas (comp: Label) {\n        if (comp.cacheMode !== Label.CacheMode.BITMAP) return;\n        const frame = comp.ttfSpriteFrame!;\n        dynamicAtlasManager.packToDynamicAtlas(comp, frame);\n        comp.renderData!.uvDirty = true;\n    },\n\n    _setupOutline () {\n        _context!.strokeStyle = `rgba(${_outlineColor.r}, ${_outlineColor.g}, ${_outlineColor.b}, ${_outlineColor.a / 255})`;\n        _context!.lineWidth = _outlineComp!.width * 2;\n    },\n\n    _setupShadow () {\n        _context!.shadowColor = `rgba(${_shadowColor.r}, ${_shadowColor.g}, ${_shadowColor.b}, ${_shadowColor.a / 255})`;\n        _context!.shadowBlur = _shadowComp!.blur;\n        _context!.shadowOffsetX = _shadowComp!.offset.x;\n        _context!.shadowOffsetY = -_shadowComp!.offset.y;\n    },\n\n    _drawTextEffect (startPosition: Vec2, lineHeight: number) {\n        if (!_shadowComp && !_outlineComp && !_isUnderline) return;\n\n        const isMultiple = _splitStrings.length > 1 && _shadowComp;\n        const measureText = this._measureText(_context!, _fontDesc);\n        let drawTextPosX = 0;\n        let drawTextPosY = 0;\n\n        // only one set shadow and outline\n        if (_shadowComp) {\n            this._setupShadow();\n        }\n\n        if (_outlineComp) {\n            this._setupOutline();\n        }\n\n        // draw shadow and (outline or text)\n        for (let i = 0; i < _splitStrings.length; ++i) {\n            drawTextPosX = startPosition.x;\n            drawTextPosY = startPosition.y + i * lineHeight;\n            // multiple lines need to be drawn outline and fill text\n            if (isMultiple) {\n                if (_outlineComp) {\n                    _context!.strokeText(_splitStrings[i], drawTextPosX, drawTextPosY);\n                }\n                _context!.fillText(_splitStrings[i], drawTextPosX, drawTextPosY);\n            }\n\n            // draw underline\n            if (_isUnderline) {\n                _drawUnderlineWidth = measureText(_splitStrings[i]);\n                if (_hAlign === HorizontalTextAlignment.RIGHT) {\n                    _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth;\n                } else if (_hAlign === HorizontalTextAlignment.CENTER) {\n                    _drawUnderlinePos.x = startPosition.x - (_drawUnderlineWidth / 2);\n                } else {\n                    _drawUnderlinePos.x = startPosition.x;\n                }\n                _drawUnderlinePos.y = drawTextPosY + _drawFontsize / 8;\n                _context!.fillRect(_drawUnderlinePos.x, _drawUnderlinePos.y, _drawUnderlineWidth, _underlineThickness);\n            }\n        }\n\n        if (isMultiple) {\n            _context!.shadowColor = 'transparent';\n        }\n    },\n\n    _updateLabelDimensions () {\n        _canvasSize.width = Math.min(_canvasSize.width, MAX_SIZE);\n        _canvasSize.height = Math.min(_canvasSize.height, MAX_SIZE);\n\n        let recreate = false;\n        if (_canvas!.width !== _canvasSize.width) {\n            _canvas!.width = _canvasSize.width;\n            recreate = true;\n        }\n\n        if (_canvas!.height !== _canvasSize.height) {\n            _canvas!.height = _canvasSize.height;\n            recreate = true;\n        }\n\n        if (recreate) _context!.font = _fontDesc;\n        // align\n        _context!.textAlign = Alignment[_hAlign] as any;\n        _context!.textBaseline = 'alphabetic';\n    },\n\n    _getFontDesc () {\n        let fontDesc = `${_fontSize.toString()}px `;\n        fontDesc += _fontFamily;\n        if (_isBold) {\n            fontDesc = `bold ${fontDesc}`;\n        }\n\n        if (_isItalic) {\n            fontDesc = `italic ${fontDesc}`;\n        }\n\n        return fontDesc;\n    },\n\n    _getLineHeight () {\n        let nodeSpacingY = _lineHeight;\n        if (nodeSpacingY === 0) {\n            nodeSpacingY = _fontSize;\n        } else {\n            nodeSpacingY = nodeSpacingY * _fontSize / _drawFontsize;\n        }\n\n        return nodeSpacingY | 0;\n    },\n\n    _calculateParagraphLength (paragraphedStrings: string[], ctx: CanvasRenderingContext2D) {\n        const paragraphLength: number[] = [];\n\n        for (const para of paragraphedStrings) {\n            const width: number = safeMeasureText(ctx, para, _fontDesc);\n            paragraphLength.push(width);\n        }\n\n        return paragraphLength;\n    },\n\n    _measureText (ctx: CanvasRenderingContext2D, fontDesc) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return (string: string) => safeMeasureText(ctx, string, fontDesc);\n    },\n\n    _calculateShrinkFont (paragraphedStrings) {\n        if (!_context) return;\n        const paragraphLength = this._calculateParagraphLength(paragraphedStrings, _context);\n\n        let i = 0;\n        let totalHeight = 0;\n        let maxLength = 0;\n\n        if (_isWrapText) {\n            const canvasWidthNoMargin = _nodeContentSize.width;\n            const canvasHeightNoMargin = _nodeContentSize.height;\n            if (canvasWidthNoMargin < 0 || canvasHeightNoMargin < 0) {\n                return;\n            }\n            totalHeight = canvasHeightNoMargin + 1;\n            const actualFontSize = _fontSize + 1;\n            let textFragment: string[] = [];\n            let left = 0;\n            let right = actualFontSize | 0;\n            let mid = 0;\n\n            while (left < right) {\n                mid = (left + right + 1) >> 1;\n\n                if (mid <= 0) {\n                    logID(4003);\n                    break;\n                }\n\n                _fontSize = mid;\n                _fontDesc = this._getFontDesc();\n                _context.font = _fontDesc;\n                const lineHeight = this._getLineHeight();\n\n                totalHeight = 0;\n                for (i = 0; i < paragraphedStrings.length; ++i) {\n                    const allWidth = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);\n                    textFragment = fragmentText(paragraphedStrings[i],\n                        allWidth,\n                        canvasWidthNoMargin,\n                        this._measureText(_context, _fontDesc));\n                    totalHeight += textFragment.length * lineHeight;\n                }\n\n                if (totalHeight > canvasHeightNoMargin) {\n                    right = mid - 1;\n                } else {\n                    left = mid;\n                }\n            }\n\n            if (left === 0) {\n                logID(4003);\n            } else {\n                _fontSize = left;\n                _fontDesc = this._getFontDesc();\n                _context.font = _fontDesc;\n            }\n        } else {\n            totalHeight = paragraphedStrings.length * this._getLineHeight();\n\n            for (i = 0; i < paragraphedStrings.length; ++i) {\n                if (maxLength < paragraphLength[i]) {\n                    maxLength = paragraphLength[i];\n                }\n            }\n            const scaleX = (_canvasSize.width - _canvasPadding.width) / maxLength;\n            const scaleY = _canvasSize.height / totalHeight;\n\n            _fontSize = (_drawFontsize * Math.min(1, scaleX, scaleY)) | 0;\n            _fontDesc = this._getFontDesc();\n            _context.font = _fontDesc;\n        }\n    },\n\n    _calculateWrapText (paragraphedStrings) {\n        if (!_isWrapText || !_context) return;\n\n        _splitStrings = [];\n        const canvasWidthNoMargin = _nodeContentSize.width;\n        for (let i = 0; i < paragraphedStrings.length; ++i) {\n            const allWidth = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);\n            const textFragment = fragmentText(paragraphedStrings[i],\n                allWidth,\n                canvasWidthNoMargin,\n                this._measureText(_context, _fontDesc));\n            _splitStrings = _splitStrings.concat(textFragment);\n        }\n    },\n\n    _calculateLabelFont () {\n        if (!_context) {\n            return;\n        }\n\n        const paragraphedStrings = _string.split('\\n');\n\n        _splitStrings = paragraphedStrings;\n        _fontDesc = this._getFontDesc();\n        _context.font = _fontDesc;\n\n        switch (_overflow) {\n        case Overflow.NONE: {\n            let canvasSizeX = 0;\n            let canvasSizeY = 0;\n            for (let i = 0; i < paragraphedStrings.length; ++i) {\n                const paraLength = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);\n                canvasSizeX = canvasSizeX > paraLength ? canvasSizeX : paraLength;\n            }\n            canvasSizeY = (_splitStrings.length + BASELINE_RATIO) * this._getLineHeight();\n            const rawWidth = parseFloat(canvasSizeX.toFixed(2));\n            const rawHeight = parseFloat(canvasSizeY.toFixed(2));\n            _canvasSize.width = rawWidth + _canvasPadding.width;\n            _canvasSize.height = rawHeight + _canvasPadding.height;\n            _nodeContentSize.width = rawWidth + _contentSizeExtend.width;\n            _nodeContentSize.height = rawHeight + _contentSizeExtend.height;\n            break;\n        }\n        case Overflow.SHRINK: {\n            this._calculateShrinkFont(paragraphedStrings);\n            this._calculateWrapText(paragraphedStrings);\n            break;\n        }\n        case Overflow.CLAMP: {\n            this._calculateWrapText(paragraphedStrings);\n            break;\n        }\n        case Overflow.RESIZE_HEIGHT: {\n            this._calculateWrapText(paragraphedStrings);\n            const rawHeight = (_splitStrings.length + BASELINE_RATIO) * this._getLineHeight();\n            _canvasSize.height = rawHeight + _canvasPadding.height;\n            // set node height\n            _nodeContentSize.height = rawHeight + _contentSizeExtend.height;\n            break;\n        }\n        default: {\n            // nop\n        }\n        }\n    },\n};\n\nexport enum BlendFactor {\n    ZERO,\n    ONE,\n    SRC_ALPHA,\n    DST_ALPHA,\n    ONE_MINUS_SRC_ALPHA,\n    ONE_MINUS_DST_ALPHA,\n    SRC_COLOR,\n    DST_COLOR,\n    ONE_MINUS_SRC_COLOR,\n    ONE_MINUS_DST_COLOR,\n    SRC_ALPHA_SATURATE,\n    CONSTANT_COLOR,\n    ONE_MINUS_CONSTANT_COLOR,\n    CONSTANT_ALPHA,\n    ONE_MINUS_CONSTANT_ALPHA,\n}"]}